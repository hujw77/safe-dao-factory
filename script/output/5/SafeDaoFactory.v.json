{"language":"Solidity","sources":{"src/SafeDaoFactory.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {ICREATE3Factory} from \"create3-deploy/src/ICREATE3Factory.sol\";\nimport {IGnosisSafeProxyFactory} from \"./IGnosisSafeProxyFactory.sol\";\nimport {ISafeDaoFactory} from \"./ISafeDaoFactory.sol\";\n\ncontract SafeDaoFactory is ISafeDaoFactory {\n    event ProxyCreation(address proxy, address singleton);\n\n    address public immutable CREATE3_FACTORY;\n    address public immutable SAFE_FACTORY;\n    address public immutable SAFE_SINGLETON;\n\n    constructor(address c3, address safe, address singleton) {\n        require(c3 != address(0), \"za\");\n        require(safe != address(0), \"za\");\n        require(singleton != address(0), \"za\");\n        CREATE3_FACTORY = c3;\n        SAFE_FACTORY = safe;\n        SAFE_SINGLETON = singleton;\n    }\n\n    function deploy(bytes32 salt, bytes memory initializer) external returns (address proxy) {\n        bytes memory creationCode = IGnosisSafeProxyFactory(SAFE_FACTORY).proxyCreationCode();\n        bytes memory deploymentCode = abi.encodePacked(creationCode, uint256(uint160(SAFE_SINGLETON)));\n        proxy = ICREATE3Factory(CREATE3_FACTORY).deploy(salt, deploymentCode);\n        if (initializer.length > 0) {\n            assembly {\n                if eq(call(gas(), proxy, 0, add(initializer, 0x20), mload(initializer), 0, 0), 0) { revert(0, 0) }\n            }\n        }\n        emit ProxyCreation(proxy, SAFE_SINGLETON);\n    }\n}\n"},"lib/create3-deploy/src/ICREATE3Factory.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0;\n\n/// @title Factory for deploying contracts to deterministic addresses via CREATE3\n/// @author echo77\n/// @author Inspired from https://github.com/ZeframLou/create3-factory\n/// @notice Enables deploying contracts using CREATE3. Each deployer (msg.sender) has\n/// its own namespace for deployed addresses.\ninterface ICREATE3Factory {\n    /// @notice Deploys a contract using CREATE3\n    /// @dev The provided salt is hashed together with msg.sender to generate the final salt\n    /// @param salt The deployer-specific salt for determining the deployed contract's address\n    /// @param creationCode The creation code of the contract to deploy\n    /// @return deployed The address of the deployed contract\n    function deploy(bytes32 salt, bytes memory creationCode) external payable returns (address deployed);\n\n    /// @notice Predicts the address of a deployed contract\n    /// @dev The provided salt is hashed together with the deployer address to generate the final salt\n    /// @param deployer The deployer account that will call deploy()\n    /// @param salt The deployer-specific salt for determining the deployed contract's address\n    /// @return deployed The address of the contract that will be deployed\n    function getDeployed(address deployer, bytes32 salt) external view returns (address deployed);\n}\n"},"src/IGnosisSafeProxyFactory.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface IGnosisSafeProxyFactory {\n    function proxyCreationCode() external pure returns (bytes memory);\n}\n"},"src/ISafeDaoFactory.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface ISafeDaoFactory {\n    function deploy(bytes32 salt, bytes memory initializer) external returns (address proxy);\n}\n"}},"settings":{"remappings":["ds-test/=lib/create3-deploy/lib/forge-std/lib/ds-test/src/","forge-std/=lib/create3-deploy/lib/forge-std/src/","solmate/=lib/create3-deploy/lib/solmate/src/","create3-deploy/=lib/create3-deploy/"],"optimizer":{"enabled":true,"runs":999999},"metadata":{"useLiteralContent":false,"bytecodeHash":"ipfs"},"outputSelection":{"*":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]}},"evmVersion":"london","libraries":{}}}
